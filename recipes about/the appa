Free-recipes version

recipes list(weekly menu analogue)

 app intro with images(finish with displaying content, test how it works, complete js, so app intro opens only one time). Images picked. Controller added. Content picked.

 GL without buttons - long list

 complex recipe

 move styles to appropriate place

 add material design version for free menu version

 change steps in json to directions
 -------------------------------------
 
 Weekly-Meals(alpha)
 
 
 meal plan types(allergies free, gluten free, cooking for two, family with kids(main option))

 Sample menus (3 different types)

 Complex recipe

 complex json parsing

 Grocery list from main json file

 Grocery list template 2 - long scroll-able list with all categories in one page (filter/search will be cool)

 Grocery list settings & Recipe calendar

 Weekly menu from main json file

 Intro with images

 Nutrition facts

 Recipe Image upload to amazon or free storage or to google drive, any fast option

 Angular service with helper methods(just implement methods from api - that it)

 Answer to question - how to have 1 recipe for 3 different meal plans(ingredient A1 replace to A2, ingredient C removed, ingredient D make 2x) - so in grocery list might be changes

 Convert string "1 cup + 1 cup" to "2 cups", "1/4 teaspoon + 2/7 teaspoon" to "15/28 teaspoon", not 0.3333336

 Grocery list can automatically calculate same ingredients from one category from different recipes, from different days

 Servings can be changed in different recipes, different days and this changes might be applied to grocery list
 
 
 -----------
 
 BETA
 
 
 Database

 GL with save method

 admin dashboard

 search

 API + documentations

 Developers portal(optional)

 Recurring payments from clients (not recurring from meal planning users)

 User can add other users to their plan and this will increase cost but apply some discount too. You can add your family, mom. You can use this for sharing your recipes and grocery between people. like github enterprise, JIRA, Google Apps for business.

 Making package, that can be installed on different servers and run locally, cheaper, but without ability to get updates automatically. Working with main server via API



===================

SERVER SIDE

Free Menu Release(completed):

GET http://localhost:3000/api/menu?access_token=%token%
Get list with all created menus(with recipe Ids)

GET http://localhost:3000/api/menu/593ac56c2c941720bc3091b1?access_token=%token%
Get one menu by Id

GET http://localhost:3000/api/menu/last?access_token=%token%
Get only one latest published menu

GET http://localhost:3000/api/recipe?access_token=%token%
Get list with all created recipes

GET http://localhost:3000/api/recipe/593abe383199170e50a5272d?access_token=%token%
Get one recipe by Id

GET recipe/:id/full
Get recipe with all necessary data like ingredients. @todo Later add stuff like allergies, etc.

GET http://localhost:3000/api/grocery/menu?groceryId=594d45227741a0312874c465&access_token=%token%
Get ingredients and display them in list view with directions and link to recipy by recipeId

Filter By Published Date: ASC/DESC

=======================================

GROCERY API ONLY
// POST [/grocerylist/department] Departmentalize a list of strings -- used for ad-hoc grocery list item addition
// DELETE [/grocerylist] Delete all the items on a grocery list; faster operation than a sync with deleted items.
// GET [/grocerylist] Get the user's grocery list. User is determined by Basic Authentication.
// POST [/grocerylist/recipe] Add a Recipe to the grocery list. In the request data, pass in recipeId, scale (scale=1.0 says to keep the recipe the same size as originally posted), markAsPending (true/false) to indicate that the lines in the recipe should be marked in a "pending" (unconfirmed by user) state.
// POST [/grocerylist/sync] Synchronize the grocery list. Call this with a POST to /grocerylist/sync
// POST [/grocerylist/item] Add a single line item to the grocery list
// DELETE [/grocerylist/item/{guid}] [/grocerylist/item/{guid}] DELETE will delete this item assuming you own it.
// PUT [/grocerylist/item/{guid}] Update a grocery item by GUID
